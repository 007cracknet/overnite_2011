.data
array:		.space 40			#array of integers of size 10
read: 		.asciiz "Enter a number:"	#text used for printing
writeSum: 	.asciiz "\nSum="		#text used for printing
writeMax:	.asciiz "\nnMax="		#text used for printing
writeMin:	.asciiz "\nMin="		#text used for printing
writeSecMax:    .asciiz "\nSecond Max="		#text used for printing
writeSecMin:     .asciiz "\nSecond Min="		#text used for printing
.text
main:
li $t0, 0					#register for array index
li $t1, 0					#register for sum
li $t2, 0					#register for min
li $t3, 0					#register for max
li $t4, 0					#register for second min	
li $t5, 0					#register for reading array elements
li $t6, 0					#register for second max

readLoop:					#for reading the elemants of array
la $a0, read				
li $v0, 4
syscall
li $v0, 5					
syscall		
sw $v0, array($t0)			#load value of array at address $t0 with $vo
addi $t0, $t0, 4			#accessing address of next element in array
blt $t0, 40, readLoop		#loop condition
li $t0, 0					#array address = 0
lw $t2, array($t0)			#initalise min to first element of array
lw $t3, array($t0)			#initialise max to first element of array
beq $t0, 40, computeSum		#boundary condition to exit and branch to computeSum

computeSum:					#to compute the sum of array elements
lw $t5, array($t0)			#load the value of array at $t0 to $t5
add $t1, $t1, $t5			#summing the array elements to $t1
addi $t0, $t0, 4			#accessing the next element's address
blt $t0, 40, compute		#loop condition
li $t0, 0					#addressing the first element of array
beq $t0, 40, computeMin		#loop exit condition

computeMin:					#for computation of minimum
beq $t0, 40 , initialise1	#loop exit condition
lw $t5, array($t0)			#load the value of array into $t0
addi $t0, $t0, 4			#accessing the next element of array
bgt $t5, $t2, computeMin	#looping if current value ($t5) is greater than minimum($t2)	
move $t2, $t5				#if not then min = current value
b computeMin				#looping

initialise1:				#to address to the first element of array 
li $t0, 0					#first element addressed
b computeMax				#jumping to maximum calculation

computeMax:					#to compute max
beq $t0, 40, initialise2	#loop exit condition	
lw $t5, array($t0)			#load the value of array into $t0
addi $t0, $t0, 4			#accessing the next element of array
blt $t5, $t3, computeMax	#looping if current value ($t5) is less than minimum($t3)	
move $t3, $t5				#if not then max = current value
b computeMax				#looping

initialise2:				#to address to the first element of array
li $t0,0					#first element addressed
move $t4, $t3				#curr second minimum is addressed to maximum
b computeSecMin				#jumping to computing second minimum

computeSecMin:				#to compute the second minimum
beq $t0, 40, initialise3
lw $t5, array($t0)
addi $t0, $t0, 4
bgt $t5, $t4, computeSecMin
beq $t4, $t2, computeSecMin	#extra condition that if the current element is equal to the minimum, loop
move $t4, $t5
b computeSecMin

initialise3:				#to address to the first element of array
li $t0, 0					#first element addressed
move $t6, $t2				#curr second maximum is addressed to minimum
b computeSecMax				#jumping to computing second maximum

computeSecMax:				#to compute the second maximum
beq $t0, 40, printNexit		
lw $t5, array($t0)
addi $t0, $t0, 4
blt $t5, $t6, computeSecMax
beq $t3, $t5, computeSecMax	#extra condition that if the current element is equal to the maximum, loop
move $t6, $t5
b computeSecMax

printNexit:					#to print results and exit program
la $a0, writeSum			#to print sum	
li $v0, 4
syscall
move $a0, $t1
li $v0, 1
syscall

la $a0, writeMax			#to print maximum
li $v0, 4
syscall
move $a0, $t3
li $v0, 1
syscall

la $a0, writeSecMax			#to print second maximum
li $v0, 4
syscall
move $a0, $t6
li $v0, 1
syscall

la $a0, writeMin			#to print minimum
li $v0, 4
syscall
move $a0, $t2
li $v0, 1
syscall

la $a0, writeSecMin			#to print second minimum
li $v0, 4
syscall
move $a0, $t4
li $v0, 1
syscall

li $v0, 10					#to exit from program
syscall
